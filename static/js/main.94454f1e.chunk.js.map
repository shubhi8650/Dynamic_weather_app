{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["api","App","useState","query","setQuery","weather","setWeather","className","main","temp","type","placeholder","onChange","e","target","value","onKeyPress","event","key","fetch","then","res","json","result","console","log","name","sys","country","today","Date","day","getDay","date","getDate","month","getMonth","year","getFullYear","time","toLocaleTimeString","dateBuilder","Math","round","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2KAIMA,EACA,mCADAA,EAEE,2CAmEOC,MAhEf,WAEE,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA8BF,mBAAS,IAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KA+BA,OACE,qBAAKC,UAAoC,qBAAjBF,EAAQG,MAAyBH,EAAQG,KAAKC,KAAO,GAAM,WAAoB,MAAvG,SACE,iCACE,qBAAKF,UAAU,aAAf,SACE,uBAAOG,KAAK,OAAOH,UAAY,aAC/BI,YAAY,uBAAuBC,SAAU,SAACC,GAAD,OAAKT,EAASS,EAAEC,OAAOC,QAClEA,MAAOZ,EAAOa,WAnCT,SAAAC,GACI,UAAdA,EAAMC,KACPC,MAAM,GAAD,OAAInB,EAAJ,qBAAyBG,EAAzB,+BAAqDH,IACzDoB,MAAK,SAAAC,GAAG,OAAEA,EAAIC,UACdF,MAAK,SAAAG,GACJnB,EAAS,IACTE,EAAWiB,GACXC,QAAQC,IAAIF,WAgCa,oBAAhBlB,EAAQG,KACjB,gCACE,sBAAKD,UAAU,eAAf,UACE,sBAAKA,UAAW,WAAhB,UAA4BF,EAAQqB,KAApC,KAA4CrB,EAAQsB,IAAIC,WACxD,qBAAKrB,UAAW,OAAhB,SA9BV,WACE,IAIIsB,EAAQ,IAAIC,KAEZC,EAJM,CAAC,SAAW,UAAY,YAAc,WAAa,SAAW,YAIxDF,EAAMG,UAClBC,EAAOJ,EAAMK,UACbC,EARS,CAAC,UAAY,UAAY,QAAU,QAAU,MAAQ,OAAS,OAAS,SAAW,YAAc,UAAY,WAAa,YAQnHN,EAAMO,WAAW,GAChCC,EAAOR,EAAMS,cACbC,EAAOV,EAAMW,qBAEjB,MAAM,GAAN,OAAUT,EAAV,aAAkBE,EAAlB,YAA0BE,EAA1B,YAAmCE,EAAnC,aAA4CE,GAiBZE,QAE1B,sBAAKlC,UAAU,cAAf,UACE,sBAAKA,UAAU,OAAf,UACCmC,KAAKC,MAAMtC,EAAQG,KAAKC,MADzB,WAGA,sBAAKF,UAAU,UAAf,cAA2BF,EAAQA,QAAQ,GAAGG,cAI/C,SCvDIoC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB1B,MAAK,YAAkD,IAA/C2B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.94454f1e.chunk.js","sourcesContent":["\n\nimport React, {useState} from 'react';\n\nconst api ={\n  key:'012775af5f4b4d830c946593627d2444',\n  base: \"https://api.openweathermap.org/data/2.5/\"\n}\n\nfunction App() {\n\n  const [query, setQuery] = useState('')\n  const [weather, setWeather] = useState('')\n\n  const search = event =>{\n    if(event.key === \"Enter\"){\n      fetch(`${api.base}weather?q=${query}&units=metric&APPID=${api.key}`)\n      .then(res=>res.json())\n      .then(result=>{\n        setQuery('');\n        setWeather(result)\n        console.log(result)\n        \n      });\n    }\n  }\n\n  function dateBuilder(){\n    let months = [\"January\" , \"Febuary\" , \"March\" , \"April\" , \"May\" , \"June\" , \"July\" , \"August\" , \"September\" , \"October\" , \"November\" , \"December\"]\n\n    let days= [\"Monday\" , \"Tuesday\" , \"Wednesday\" , \"Thrusday\" , \"Friday\" , \"Saturday\"]\n\n    let today = new Date();\n    \n    let day =  days[today.getDay()];\n    let date = today.getDate();\n    let month = months[today.getMonth()+1];\n    let year = today.getFullYear();\n    let time = today.toLocaleTimeString()\n\n    return `${day}, ${date} ${month} ${year}, ${time}`\n  }\n  \n  return (\n    <div className={(typeof weather.main !== 'undefined') ? (weather.main.temp > 16) ? 'app warm' : 'app': 'app'}>\n      <main>\n        <div className=\"search-box\">\n          <input type='text' className = \"search-bar\" \n          placeholder=\"Enter a city name...\" onChange={(e)=>setQuery(e.target.value) }\n            value={query} onKeyPress={search}\n          />\n\n        </div>\n        {(typeof weather.main != \"undefined\") ?(\n        <div>\n          <div className=\"location-box\">\n            <div className= \"location\">{weather.name}, {weather.sys.country}</div>\n            <div className= \"date\">{dateBuilder()}</div>\n          </div>\n          <div className=\"whether-box\">\n            <div className=\"temp\">\n            {Math.round(weather.main.temp)}Â°c\n            </div>\n            <div className=\"whether\"> {weather.weather[0].main}</div>\n            \n          </div>\n        </div>\n        ):('')}\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}